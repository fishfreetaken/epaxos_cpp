// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_conf_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_conf_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_conf_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_conf_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_conf_2eproto;
namespace epxos_instance_proto {
class EnNodeInfo;
struct EnNodeInfoDefaultTypeInternal;
extern EnNodeInfoDefaultTypeInternal _EnNodeInfo_default_instance_;
class EpGlobalConf;
struct EpGlobalConfDefaultTypeInternal;
extern EpGlobalConfDefaultTypeInternal _EpGlobalConf_default_instance_;
class EpNodeId;
struct EpNodeIdDefaultTypeInternal;
extern EpNodeIdDefaultTypeInternal _EpNodeId_default_instance_;
class LocalInstanceId;
struct LocalInstanceIdDefaultTypeInternal;
extern LocalInstanceIdDefaultTypeInternal _LocalInstanceId_default_instance_;
}  // namespace epxos_instance_proto
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace epxos_instance_proto {

// ===================================================================


// -------------------------------------------------------------------

class EpNodeId final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:epxos_instance_proto.EpNodeId) */ {
 public:
  inline EpNodeId() : EpNodeId(nullptr) {}
  ~EpNodeId() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EpNodeId(::google::protobuf::internal::ConstantInitialized);

  EpNodeId(const EpNodeId& from);
  EpNodeId(EpNodeId&& from) noexcept
    : EpNodeId() {
    *this = ::std::move(from);
  }

  inline EpNodeId& operator=(const EpNodeId& from) {
    CopyFrom(from);
    return *this;
  }
  inline EpNodeId& operator=(EpNodeId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EpNodeId& default_instance() {
    return *internal_default_instance();
  }
  static inline const EpNodeId* internal_default_instance() {
    return reinterpret_cast<const EpNodeId*>(
               &_EpNodeId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EpNodeId& a, EpNodeId& b) {
    a.Swap(&b);
  }
  inline void Swap(EpNodeId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EpNodeId* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EpNodeId* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EpNodeId>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EpNodeId& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EpNodeId& from) {
    EpNodeId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EpNodeId* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "epxos_instance_proto.EpNodeId";
  }
  protected:
  explicit EpNodeId(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:epxos_instance_proto.EpNodeId)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_conf_2eproto;
};// -------------------------------------------------------------------

class EnNodeInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:epxos_instance_proto.EnNodeInfo) */ {
 public:
  inline EnNodeInfo() : EnNodeInfo(nullptr) {}
  ~EnNodeInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EnNodeInfo(::google::protobuf::internal::ConstantInitialized);

  EnNodeInfo(const EnNodeInfo& from);
  EnNodeInfo(EnNodeInfo&& from) noexcept
    : EnNodeInfo() {
    *this = ::std::move(from);
  }

  inline EnNodeInfo& operator=(const EnNodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnNodeInfo& operator=(EnNodeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnNodeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnNodeInfo* internal_default_instance() {
    return reinterpret_cast<const EnNodeInfo*>(
               &_EnNodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EnNodeInfo& a, EnNodeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EnNodeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnNodeInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnNodeInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnNodeInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EnNodeInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EnNodeInfo& from) {
    EnNodeInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnNodeInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "epxos_instance_proto.EnNodeInfo";
  }
  protected:
  explicit EnNodeInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 2,
    kNameFieldNumber = 4,
    kIIDFieldNumber = 1,
    kPortFieldNumber = 3,
  };
  // string ip = 2;
  void clear_ip() ;
  const std::string& ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip(Arg_&& arg, Args_... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ptr);

  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(
      const std::string& value);
  std::string* _internal_mutable_ip();

  public:
  // optional string name = 4;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .epxos_instance_proto.EpNodeId iID = 1;
  bool has_iid() const;
  void clear_iid() ;
  const ::epxos_instance_proto::EpNodeId& iid() const;
  PROTOBUF_NODISCARD ::epxos_instance_proto::EpNodeId* release_iid();
  ::epxos_instance_proto::EpNodeId* mutable_iid();
  void set_allocated_iid(::epxos_instance_proto::EpNodeId* value);
  void unsafe_arena_set_allocated_iid(::epxos_instance_proto::EpNodeId* value);
  ::epxos_instance_proto::EpNodeId* unsafe_arena_release_iid();

  private:
  const ::epxos_instance_proto::EpNodeId& _internal_iid() const;
  ::epxos_instance_proto::EpNodeId* _internal_mutable_iid();

  public:
  // int32 port = 3;
  void clear_port() ;
  ::int32_t port() const;
  void set_port(::int32_t value);

  private:
  ::int32_t _internal_port() const;
  void _internal_set_port(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:epxos_instance_proto.EnNodeInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      46, 2>
      _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr ip_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::epxos_instance_proto::EpNodeId* iid_;
    ::int32_t port_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_conf_2eproto;
};// -------------------------------------------------------------------

class LocalInstanceId final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:epxos_instance_proto.LocalInstanceId) */ {
 public:
  inline LocalInstanceId() : LocalInstanceId(nullptr) {}
  ~LocalInstanceId() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LocalInstanceId(::google::protobuf::internal::ConstantInitialized);

  LocalInstanceId(const LocalInstanceId& from);
  LocalInstanceId(LocalInstanceId&& from) noexcept
    : LocalInstanceId() {
    *this = ::std::move(from);
  }

  inline LocalInstanceId& operator=(const LocalInstanceId& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalInstanceId& operator=(LocalInstanceId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalInstanceId& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalInstanceId* internal_default_instance() {
    return reinterpret_cast<const LocalInstanceId*>(
               &_LocalInstanceId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LocalInstanceId& a, LocalInstanceId& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalInstanceId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalInstanceId* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalInstanceId* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalInstanceId>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LocalInstanceId& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LocalInstanceId& from) {
    LocalInstanceId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalInstanceId* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "epxos_instance_proto.LocalInstanceId";
  }
  protected:
  explicit LocalInstanceId(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIIDFieldNumber = 1,
  };
  // uint64 iID = 1;
  void clear_iid() ;
  ::uint64_t iid() const;
  void set_iid(::uint64_t value);

  private:
  ::uint64_t _internal_iid() const;
  void _internal_set_iid(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:epxos_instance_proto.LocalInstanceId)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t iid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_conf_2eproto;
};// -------------------------------------------------------------------

class EpGlobalConf final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:epxos_instance_proto.EpGlobalConf) */ {
 public:
  inline EpGlobalConf() : EpGlobalConf(nullptr) {}
  ~EpGlobalConf() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EpGlobalConf(::google::protobuf::internal::ConstantInitialized);

  EpGlobalConf(const EpGlobalConf& from);
  EpGlobalConf(EpGlobalConf&& from) noexcept
    : EpGlobalConf() {
    *this = ::std::move(from);
  }

  inline EpGlobalConf& operator=(const EpGlobalConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline EpGlobalConf& operator=(EpGlobalConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EpGlobalConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const EpGlobalConf* internal_default_instance() {
    return reinterpret_cast<const EpGlobalConf*>(
               &_EpGlobalConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EpGlobalConf& a, EpGlobalConf& b) {
    a.Swap(&b);
  }
  inline void Swap(EpGlobalConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EpGlobalConf* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EpGlobalConf* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EpGlobalConf>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EpGlobalConf& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EpGlobalConf& from) {
    EpGlobalConf::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EpGlobalConf* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "epxos_instance_proto.EpGlobalConf";
  }
  protected:
  explicit EpGlobalConf(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeListFieldNumber = 2,
    kFastGpListFieldNumber = 3,
    kLocalNodeidFieldNumber = 1,
  };
  // repeated .epxos_instance_proto.EnNodeInfo node_list = 2;
  int node_list_size() const;
  private:
  int _internal_node_list_size() const;

  public:
  void clear_node_list() ;
  ::epxos_instance_proto::EnNodeInfo* mutable_node_list(int index);
  ::google::protobuf::RepeatedPtrField< ::epxos_instance_proto::EnNodeInfo >*
      mutable_node_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::epxos_instance_proto::EnNodeInfo>& _internal_node_list() const;
  ::google::protobuf::RepeatedPtrField<::epxos_instance_proto::EnNodeInfo>* _internal_mutable_node_list();
  public:
  const ::epxos_instance_proto::EnNodeInfo& node_list(int index) const;
  ::epxos_instance_proto::EnNodeInfo* add_node_list();
  const ::google::protobuf::RepeatedPtrField< ::epxos_instance_proto::EnNodeInfo >&
      node_list() const;
  // repeated .epxos_instance_proto.EpNodeId fast_gp_list = 3;
  int fast_gp_list_size() const;
  private:
  int _internal_fast_gp_list_size() const;

  public:
  void clear_fast_gp_list() ;
  ::epxos_instance_proto::EpNodeId* mutable_fast_gp_list(int index);
  ::google::protobuf::RepeatedPtrField< ::epxos_instance_proto::EpNodeId >*
      mutable_fast_gp_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::epxos_instance_proto::EpNodeId>& _internal_fast_gp_list() const;
  ::google::protobuf::RepeatedPtrField<::epxos_instance_proto::EpNodeId>* _internal_mutable_fast_gp_list();
  public:
  const ::epxos_instance_proto::EpNodeId& fast_gp_list(int index) const;
  ::epxos_instance_proto::EpNodeId* add_fast_gp_list();
  const ::google::protobuf::RepeatedPtrField< ::epxos_instance_proto::EpNodeId >&
      fast_gp_list() const;
  // .epxos_instance_proto.EpNodeId local_nodeid = 1;
  bool has_local_nodeid() const;
  void clear_local_nodeid() ;
  const ::epxos_instance_proto::EpNodeId& local_nodeid() const;
  PROTOBUF_NODISCARD ::epxos_instance_proto::EpNodeId* release_local_nodeid();
  ::epxos_instance_proto::EpNodeId* mutable_local_nodeid();
  void set_allocated_local_nodeid(::epxos_instance_proto::EpNodeId* value);
  void unsafe_arena_set_allocated_local_nodeid(::epxos_instance_proto::EpNodeId* value);
  ::epxos_instance_proto::EpNodeId* unsafe_arena_release_local_nodeid();

  private:
  const ::epxos_instance_proto::EpNodeId& _internal_local_nodeid() const;
  ::epxos_instance_proto::EpNodeId* _internal_mutable_local_nodeid();

  public:
  // @@protoc_insertion_point(class_scope:epxos_instance_proto.EpGlobalConf)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::epxos_instance_proto::EnNodeInfo > node_list_;
    ::google::protobuf::RepeatedPtrField< ::epxos_instance_proto::EpNodeId > fast_gp_list_;
    ::epxos_instance_proto::EpNodeId* local_nodeid_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_conf_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EpNodeId

// uint32 id = 1;
inline void EpNodeId::clear_id() {
  _impl_.id_ = 0u;
}
inline ::uint32_t EpNodeId::id() const {
  // @@protoc_insertion_point(field_get:epxos_instance_proto.EpNodeId.id)
  return _internal_id();
}
inline void EpNodeId::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:epxos_instance_proto.EpNodeId.id)
}
inline ::uint32_t EpNodeId::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void EpNodeId::_internal_set_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// EnNodeInfo

// .epxos_instance_proto.EpNodeId iID = 1;
inline bool EnNodeInfo::has_iid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.iid_ != nullptr);
  return value;
}
inline void EnNodeInfo::clear_iid() {
  if (_impl_.iid_ != nullptr) _impl_.iid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::epxos_instance_proto::EpNodeId& EnNodeInfo::_internal_iid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::epxos_instance_proto::EpNodeId* p = _impl_.iid_;
  return p != nullptr ? *p : reinterpret_cast<const ::epxos_instance_proto::EpNodeId&>(::epxos_instance_proto::_EpNodeId_default_instance_);
}
inline const ::epxos_instance_proto::EpNodeId& EnNodeInfo::iid() const {
  // @@protoc_insertion_point(field_get:epxos_instance_proto.EnNodeInfo.iID)
  return _internal_iid();
}
inline void EnNodeInfo::unsafe_arena_set_allocated_iid(::epxos_instance_proto::EpNodeId* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.iid_);
  }
  _impl_.iid_ = reinterpret_cast<::epxos_instance_proto::EpNodeId*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epxos_instance_proto.EnNodeInfo.iID)
}
inline ::epxos_instance_proto::EpNodeId* EnNodeInfo::release_iid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::epxos_instance_proto::EpNodeId* released = _impl_.iid_;
  _impl_.iid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::epxos_instance_proto::EpNodeId* EnNodeInfo::unsafe_arena_release_iid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:epxos_instance_proto.EnNodeInfo.iID)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::epxos_instance_proto::EpNodeId* temp = _impl_.iid_;
  _impl_.iid_ = nullptr;
  return temp;
}
inline ::epxos_instance_proto::EpNodeId* EnNodeInfo::_internal_mutable_iid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.iid_ == nullptr) {
    auto* p = CreateMaybeMessage<::epxos_instance_proto::EpNodeId>(GetArenaForAllocation());
    _impl_.iid_ = reinterpret_cast<::epxos_instance_proto::EpNodeId*>(p);
  }
  return _impl_.iid_;
}
inline ::epxos_instance_proto::EpNodeId* EnNodeInfo::mutable_iid() {
  ::epxos_instance_proto::EpNodeId* _msg = _internal_mutable_iid();
  // @@protoc_insertion_point(field_mutable:epxos_instance_proto.EnNodeInfo.iID)
  return _msg;
}
inline void EnNodeInfo::set_allocated_iid(::epxos_instance_proto::EpNodeId* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::epxos_instance_proto::EpNodeId*>(_impl_.iid_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::epxos_instance_proto::EpNodeId*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.iid_ = reinterpret_cast<::epxos_instance_proto::EpNodeId*>(value);
  // @@protoc_insertion_point(field_set_allocated:epxos_instance_proto.EnNodeInfo.iID)
}

// string ip = 2;
inline void EnNodeInfo::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& EnNodeInfo::ip() const {
  // @@protoc_insertion_point(field_get:epxos_instance_proto.EnNodeInfo.ip)
  return _internal_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EnNodeInfo::set_ip(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:epxos_instance_proto.EnNodeInfo.ip)
}
inline std::string* EnNodeInfo::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:epxos_instance_proto.EnNodeInfo.ip)
  return _s;
}
inline const std::string& EnNodeInfo::_internal_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ip_.Get();
}
inline void EnNodeInfo::_internal_set_ip(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* EnNodeInfo::_internal_mutable_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ip_.Mutable( GetArenaForAllocation());
}
inline std::string* EnNodeInfo::release_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:epxos_instance_proto.EnNodeInfo.ip)
  return _impl_.ip_.Release();
}
inline void EnNodeInfo::set_allocated_ip(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_.IsDefault()) {
          _impl_.ip_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:epxos_instance_proto.EnNodeInfo.ip)
}

// int32 port = 3;
inline void EnNodeInfo::clear_port() {
  _impl_.port_ = 0;
}
inline ::int32_t EnNodeInfo::port() const {
  // @@protoc_insertion_point(field_get:epxos_instance_proto.EnNodeInfo.port)
  return _internal_port();
}
inline void EnNodeInfo::set_port(::int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:epxos_instance_proto.EnNodeInfo.port)
}
inline ::int32_t EnNodeInfo::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_;
}
inline void EnNodeInfo::_internal_set_port(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_ = value;
}

// optional string name = 4;
inline bool EnNodeInfo::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnNodeInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EnNodeInfo::name() const {
  // @@protoc_insertion_point(field_get:epxos_instance_proto.EnNodeInfo.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EnNodeInfo::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:epxos_instance_proto.EnNodeInfo.name)
}
inline std::string* EnNodeInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:epxos_instance_proto.EnNodeInfo.name)
  return _s;
}
inline const std::string& EnNodeInfo::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void EnNodeInfo::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EnNodeInfo::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* EnNodeInfo::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:epxos_instance_proto.EnNodeInfo.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void EnNodeInfo::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:epxos_instance_proto.EnNodeInfo.name)
}

// -------------------------------------------------------------------

// LocalInstanceId

// uint64 iID = 1;
inline void LocalInstanceId::clear_iid() {
  _impl_.iid_ = ::uint64_t{0u};
}
inline ::uint64_t LocalInstanceId::iid() const {
  // @@protoc_insertion_point(field_get:epxos_instance_proto.LocalInstanceId.iID)
  return _internal_iid();
}
inline void LocalInstanceId::set_iid(::uint64_t value) {
  _internal_set_iid(value);
  // @@protoc_insertion_point(field_set:epxos_instance_proto.LocalInstanceId.iID)
}
inline ::uint64_t LocalInstanceId::_internal_iid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.iid_;
}
inline void LocalInstanceId::_internal_set_iid(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.iid_ = value;
}

// -------------------------------------------------------------------

// EpGlobalConf

// .epxos_instance_proto.EpNodeId local_nodeid = 1;
inline bool EpGlobalConf::has_local_nodeid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.local_nodeid_ != nullptr);
  return value;
}
inline void EpGlobalConf::clear_local_nodeid() {
  if (_impl_.local_nodeid_ != nullptr) _impl_.local_nodeid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::epxos_instance_proto::EpNodeId& EpGlobalConf::_internal_local_nodeid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::epxos_instance_proto::EpNodeId* p = _impl_.local_nodeid_;
  return p != nullptr ? *p : reinterpret_cast<const ::epxos_instance_proto::EpNodeId&>(::epxos_instance_proto::_EpNodeId_default_instance_);
}
inline const ::epxos_instance_proto::EpNodeId& EpGlobalConf::local_nodeid() const {
  // @@protoc_insertion_point(field_get:epxos_instance_proto.EpGlobalConf.local_nodeid)
  return _internal_local_nodeid();
}
inline void EpGlobalConf::unsafe_arena_set_allocated_local_nodeid(::epxos_instance_proto::EpNodeId* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.local_nodeid_);
  }
  _impl_.local_nodeid_ = reinterpret_cast<::epxos_instance_proto::EpNodeId*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epxos_instance_proto.EpGlobalConf.local_nodeid)
}
inline ::epxos_instance_proto::EpNodeId* EpGlobalConf::release_local_nodeid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epxos_instance_proto::EpNodeId* released = _impl_.local_nodeid_;
  _impl_.local_nodeid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::epxos_instance_proto::EpNodeId* EpGlobalConf::unsafe_arena_release_local_nodeid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:epxos_instance_proto.EpGlobalConf.local_nodeid)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epxos_instance_proto::EpNodeId* temp = _impl_.local_nodeid_;
  _impl_.local_nodeid_ = nullptr;
  return temp;
}
inline ::epxos_instance_proto::EpNodeId* EpGlobalConf::_internal_mutable_local_nodeid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.local_nodeid_ == nullptr) {
    auto* p = CreateMaybeMessage<::epxos_instance_proto::EpNodeId>(GetArenaForAllocation());
    _impl_.local_nodeid_ = reinterpret_cast<::epxos_instance_proto::EpNodeId*>(p);
  }
  return _impl_.local_nodeid_;
}
inline ::epxos_instance_proto::EpNodeId* EpGlobalConf::mutable_local_nodeid() {
  ::epxos_instance_proto::EpNodeId* _msg = _internal_mutable_local_nodeid();
  // @@protoc_insertion_point(field_mutable:epxos_instance_proto.EpGlobalConf.local_nodeid)
  return _msg;
}
inline void EpGlobalConf::set_allocated_local_nodeid(::epxos_instance_proto::EpNodeId* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::epxos_instance_proto::EpNodeId*>(_impl_.local_nodeid_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::epxos_instance_proto::EpNodeId*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.local_nodeid_ = reinterpret_cast<::epxos_instance_proto::EpNodeId*>(value);
  // @@protoc_insertion_point(field_set_allocated:epxos_instance_proto.EpGlobalConf.local_nodeid)
}

// repeated .epxos_instance_proto.EnNodeInfo node_list = 2;
inline int EpGlobalConf::_internal_node_list_size() const {
  return _internal_node_list().size();
}
inline int EpGlobalConf::node_list_size() const {
  return _internal_node_list_size();
}
inline void EpGlobalConf::clear_node_list() {
  _internal_mutable_node_list()->Clear();
}
inline ::epxos_instance_proto::EnNodeInfo* EpGlobalConf::mutable_node_list(int index) {
  // @@protoc_insertion_point(field_mutable:epxos_instance_proto.EpGlobalConf.node_list)
  return _internal_mutable_node_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::epxos_instance_proto::EnNodeInfo >*
EpGlobalConf::mutable_node_list() {
  // @@protoc_insertion_point(field_mutable_list:epxos_instance_proto.EpGlobalConf.node_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_node_list();
}
inline const ::epxos_instance_proto::EnNodeInfo& EpGlobalConf::node_list(int index) const {
  // @@protoc_insertion_point(field_get:epxos_instance_proto.EpGlobalConf.node_list)
    return _internal_node_list().Get(index);
}
inline ::epxos_instance_proto::EnNodeInfo* EpGlobalConf::add_node_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::epxos_instance_proto::EnNodeInfo* _add = _internal_mutable_node_list()->Add();
  // @@protoc_insertion_point(field_add:epxos_instance_proto.EpGlobalConf.node_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::epxos_instance_proto::EnNodeInfo >&
EpGlobalConf::node_list() const {
  // @@protoc_insertion_point(field_list:epxos_instance_proto.EpGlobalConf.node_list)
  return _internal_node_list();
}
inline const ::google::protobuf::RepeatedPtrField<::epxos_instance_proto::EnNodeInfo>&
EpGlobalConf::_internal_node_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.node_list_;
}
inline ::google::protobuf::RepeatedPtrField<::epxos_instance_proto::EnNodeInfo>*
EpGlobalConf::_internal_mutable_node_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.node_list_;
}

// repeated .epxos_instance_proto.EpNodeId fast_gp_list = 3;
inline int EpGlobalConf::_internal_fast_gp_list_size() const {
  return _internal_fast_gp_list().size();
}
inline int EpGlobalConf::fast_gp_list_size() const {
  return _internal_fast_gp_list_size();
}
inline void EpGlobalConf::clear_fast_gp_list() {
  _internal_mutable_fast_gp_list()->Clear();
}
inline ::epxos_instance_proto::EpNodeId* EpGlobalConf::mutable_fast_gp_list(int index) {
  // @@protoc_insertion_point(field_mutable:epxos_instance_proto.EpGlobalConf.fast_gp_list)
  return _internal_mutable_fast_gp_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::epxos_instance_proto::EpNodeId >*
EpGlobalConf::mutable_fast_gp_list() {
  // @@protoc_insertion_point(field_mutable_list:epxos_instance_proto.EpGlobalConf.fast_gp_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_fast_gp_list();
}
inline const ::epxos_instance_proto::EpNodeId& EpGlobalConf::fast_gp_list(int index) const {
  // @@protoc_insertion_point(field_get:epxos_instance_proto.EpGlobalConf.fast_gp_list)
    return _internal_fast_gp_list().Get(index);
}
inline ::epxos_instance_proto::EpNodeId* EpGlobalConf::add_fast_gp_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::epxos_instance_proto::EpNodeId* _add = _internal_mutable_fast_gp_list()->Add();
  // @@protoc_insertion_point(field_add:epxos_instance_proto.EpGlobalConf.fast_gp_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::epxos_instance_proto::EpNodeId >&
EpGlobalConf::fast_gp_list() const {
  // @@protoc_insertion_point(field_list:epxos_instance_proto.EpGlobalConf.fast_gp_list)
  return _internal_fast_gp_list();
}
inline const ::google::protobuf::RepeatedPtrField<::epxos_instance_proto::EpNodeId>&
EpGlobalConf::_internal_fast_gp_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fast_gp_list_;
}
inline ::google::protobuf::RepeatedPtrField<::epxos_instance_proto::EpNodeId>*
EpGlobalConf::_internal_mutable_fast_gp_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.fast_gp_list_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace epxos_instance_proto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_conf_2eproto_2epb_2eh
