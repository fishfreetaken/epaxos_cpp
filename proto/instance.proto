syntax = "proto3";

package epxos_instance_proto;
import "proto/conf.proto";

enum EpWorkState{
    EPXOS_EM_WK_EMPTY       = 0;
    EPXOS_EM_WK_PROPOSE     = 1;
    EPXOS_EM_WK_PREACCEPT   = 2;
    EPXOS_EM_WK_ACCEPT      = 3;
    EPXOS_EM_WK_COMMIT      = 4;
    EPXOS_EM_WK_EXEC        = 5;
};

message BallotNum{
    uint32  bt = 1;             //投票号
};

message EpIns{
    uint64 insid        = 1;    //事件id
    EpNodeId nodeid     = 2;    //节点编号id
};

message EpInstID {
    uint64 seqid        = 1;    //seqid，可以不唯一
    EpIns iID           = 2;
};

message EpDepsIds{
    repeated EpInstID arrdps  =1;   //依赖的节点
    uint32 version            =2;   //如果依赖有最新的值进行替换更新，那么就更新该版本号
};

message EpKeyValueItem{
    string key              = 1;
    optional string value   = 2;
};

// __EP_SEQID_NODEID_INSID_  = key
message EpInstance{
    EpInstID iID                = 1;
    EpWorkState sate            = 2;
    uint32 ballot_num           = 3;
    optional EpDepsIds arryids  = 4;
    uint32 ack_num              = 5;            //统计应答的状态和数量
    repeated EpKeyValueItem kvs = 6;            //关联的key和请求的value值
};

//key-key
message EpValueItem{
    optional string value   =1;
    EpInstID iID            =2;
};


message InstanceSwapMsg{
    EpInstance insc           = 1;
    EpNodeId to_node          = 2;
    EpNodeId from_node        = 3;
};

message EpaxosInsWriteReq{
    repeated EpKeyValueItem list    =1;
};

message EpaxosInsWriteRsp{
    int32 res_code      = 1;
    EpIns ins_rsp       = 2;
};

message EpaxosInsReadReq{
    repeated string keys  =1;
};

message EpaxosInsReadRsp{
    int32 res_code      = 1;
    EpIns ins_rsp       = 2;
    repeated EpKeyValueItem kvs = 3;           //关联的key和请求的value值
};

