syntax = "proto3";

package epxos_instance_proto;
import "proto/conf.proto";

enum EpWorkState{
    EPXOS_EM_WK_EMPTY       = 0;
    EPXOS_EM_WK_PROPOSE     = 1;
    EPXOS_EM_WK_PREACCEPT   = 2;
    EPXOS_EM_WK_ACCEPT      = 3;
    EPXOS_EM_WK_COMMIT      = 4;
    EPXOS_EM_WK_EXEC        = 5;
};

message BallotNum{
    uint32  bt = 1;             //投票号
};

message EpInstID {
    uint64 seqid        = 1;    //seqid，可以不唯一
    uint64 insid        = 2;    //事件id
    EpNodeId nodeid     = 3;    //节点编号id
};

message EpKeyValueItem{
    EpInstID iid            = 1;         //只更新最大的
    optional string key     = 2;
    optional string value   = 3;
};

message EpDepsIds{
    repeated EpKeyValueItem  item   = 1;
    uint32 version                  = 2;   //如果依赖有最新的值进行替换更新，那么就更新该版本号
};

// __EP_SEQID_NODEID_INSID_  = key
message EpInstance{
    EpInstID iid                = 1;
    EpWorkState sate            = 2;
    uint32 ballot           = 3;
    EpDepsIds depsids           = 4;
    repeated EpNodeId ack_nodes = 5;           //应答的ack
};

message InstanceSwapMsg{
    EpInstance insc           = 1;
    EpNodeId to_node          = 2;
    EpNodeId from_node        = 3;
    bool is_ack               = 4; //false                 
};

message EpaxosInsWriteReq{
    repeated EpKeyValueItem list    = 1;
    repeated EpKeyValueItem deps    = 2;   //依赖,
};

message EpaxosInsWriteRsp{
    int32 res_code                  = 1;
    repeated EpKeyValueItem ins_rsp = 2; //返回的依赖
};

message EpaxosInsReadReq{
    repeated string keys  =1;
};

message EpaxosInsReadRsp{
    int32 res_code              = 1;
    repeated EpKeyValueItem kvs = 2;           //关联的key和请求的value值
};

